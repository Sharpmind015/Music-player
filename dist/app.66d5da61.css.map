{"version":3,"sources":["scss\\core\\_global.scss","scss\\core\\_variables.scss","scss\\mixins\\_flex.scss","scss\\mixins\\_breakpoints.scss","scss\\components\\_musicinfo.scss","scss\\components\\_trackbar.scss","scss\\components\\_musiccontrol.scss","scss\\components\\_menubutton.scss","scss\\components\\_musiclist.scss"],"names":[],"mappings":"AACA;EACE;EACA;EACA;;;AAEF;EACE;EACA;EAEA,OCVM;EDWN;EACA;;;AAEF;EACE,YCbK;;;ADeP;EACE;;;AAEF;EACE,YCpBM;EDqBN;;;AAEF;EACE,YCvBK;;;AD0BP;EACE;EACA;EE7BA;EACA,aAFoC;EAGpC,iBAHsD;EFgCtD;;;AAGF;EACE;EEnCA;EACA,aAFoC;EAGpC,iBAHsD;EAKpD,gBFgCwB;;AGyE1B;EH3EF;IAII;;;AGuEF;EH3EF;IAOI;;;;AI1CJ;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,YHJQ;;AE0GR;EC9GF;IAUI;IACA;;;ADmGF;EC9GF;IAcI;IACA;;;AAGF;EACE;IACE;;EAEF;IACE;;;;AAKN;EACE;;;AAEF;EACE;EACA;EACA;EACA;;AD2EA;EC/EF;IAMI;;;ADyEF;EC/EF;IASI;;;;AAGJ;EACE;EACA;EACA;EACA;;;AC/CF;EACE,YJEK;EIDL;EACA;EACA;EACA;EACA;;AFwGA;EE9GF;IAQI;;;AFsGF;EE9GF;IAWI;;;AFmGF;EE9GF;IAcI;;;;AAGJ;EACE,kBJhBK;EIiBL;EACA;EACA;EACA;;;ACtBF;EACE;EACA;EJDA;EACA,aAFoC;EAGpC;;;AIEF;EACE;EACA;EACA;EACA;EACA,OLVM;;;AKYR;EACE;;AHiGA;EGlGF;IAGI;;;AH+FF;EGlGF;IAMI;;;;AAIJ;EACE,OLrBK;;;AMFP;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AJmGA;EI9GF;IAaI;;;;AAIJ;EACE,ONjBM;EMkBN,YNjBK;;;AE4GL;EIvFA;IACE;;;ACvBJ;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,YPVM;EOWN,YPPQ;;AEyGR;EK7GF;IAaI;;;;AAIJ;EACE;;;AAEF;EACE;EACA;EACA;EACA,OPzBM;EO0BN;;;AAEF;EACE;EACA;;;AAEF;EN/BE;EACA,aAFoC;EAGpC,iBAHsD;EMkCtD;EACA,OPnCM;EOoCN;EACA;;;AAEF;AAAA;EAEE,YPtCK;;;AOwCP;EACE;EACA;EACA;;;AAEF;EACE;EACA;EACA","file":"app.66d5da61.css","sourceRoot":"..\\src","sourcesContent":["// resets\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background-color: var(--white);\n  font-family: -apple-system, BlinkMacSystemFont, Roboto, Oxygen, Ubuntu,\n    Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Segoe UI, sans-serif;\n  color: $black;\n  height: 100%;\n  width: 100%;\n}\n::-webkit-scrollbar-track {\n  background: $blue;\n}\n::-webkit-scrollbar {\n  width: 5px;\n}\n::-webkit-scrollbar-button {\n  background: $white;\n  border-radius: 10px;\n}\n::-webkit-scrollbar-thumb {\n  background: $blue;\n}\n//Container\n.music-container {\n  width: 100%;\n  min-height: 100vh;\n  @include flex();\n  padding: 10px 10px;\n}\n//muci player container\n.music-row {\n  max-width: 992px;\n  @include flex($direction: column);\n  @include media(\"<=768px\") {\n    max-width: 200px;\n  }\n  @include media(\"<=300px\") {\n    max-width: 200px;\n  }\n}\n","$black: hsla(0, 0%, 10%, 1);\n$white: hsla(0, 0%, 95%, 1);\n$blue: hsla(207, 73%, 57%, 1);\n$grey: hsla(0, 0%, 83%, 1);\n$shadow1: 0 10px 15px -3px rgb(0 0 0 / 10%), 0 4px 6px -2px rgb(0 0 0 / 5%);\n$shadow2: 0 20px 25px -5px rgb(0 0 0 / 10%), 0 10px 10px -5px rgb(0 0 0 / 4%);\n","@mixin flex($direction: null, $align: center, $justify: center) {\r\n  display: flex;\r\n  align-items: $align;\r\n  justify-content: $justify;\r\n  @if ($direction) {\r\n    flex-direction: $direction;\r\n  }\r\n}\r\n","$breakpoints: (\n  \"phone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n",".music-image {\r\n  width: 300px;\r\n  height: 300px;\r\n  border-radius: 50%;\r\n  object-fit: contain;\r\n  margin-bottom: 20px;\r\n  animation: rotate 6s linear infinite;\r\n  animation-play-state: paused;\r\n  box-shadow: $shadow1;\r\n  @include media(\"<=768px\") {\r\n    width: 250px;\r\n    height: 250px;\r\n  }\r\n  @include media(\"<=300px\") {\r\n    width: 150px;\r\n    height: 150px;\r\n  }\r\n  //Image animation for playing song\r\n  @keyframes rotate {\r\n    from {\r\n      transform: rotate(0ddeg);\r\n    }\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n}\r\n// Image active state\r\n.music-image.is-active {\r\n  animation-play-state: running;\r\n}\r\n.music-title {\r\n  font-size: 1.3rem;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  margin-bottom: 6px;\r\n  @include media(\"<=768px\") {\r\n    font-size: 1.2rem;\r\n  }\r\n  @include media(\"<=300px\") {\r\n    font-size: 1.1rem;\r\n  }\r\n}\r\n.music-artist {\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n",".track-container {\r\n  background: $grey;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin: 10px 0;\r\n  height: 7px;\r\n  width: 700px;\r\n  @include media(\"<=768px\") {\r\n    width: 500px;\r\n  }\r\n  @include media(\"<=600px\") {\r\n    width: 300px;\r\n  }\r\n  @include media(\"<=300px\") {\r\n    width: 180px;\r\n  }\r\n}\r\n.track-bar {\r\n  background-color: $blue;\r\n  border-radius: 4px;\r\n  height: 100%;\r\n  width: 0%;\r\n  transition: width 0.1s linear;\r\n}\r\n",".music-controls {\r\n  margin-top: 20px;\r\n  width: 100%;\r\n  @include flex($justify: space-between);\r\n}\r\n.music-control {\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: $black;\r\n}\r\n.music-control i {\r\n  font-size: 1.5rem;\r\n  @include media(\"<=768px\") {\r\n    font-size: 1.5rem;\r\n  }\r\n  @include media(\"<=300px\") {\r\n    font-size: 1.3rem;\r\n  }\r\n}\r\n// Active control button\r\n.music-control i.is-active {\r\n  color: $blue;\r\n}\r\n",".menu-btn {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 60px;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 0.8rem;\r\n  font-weight: 400;\r\n  border: 1px solid $blue;\r\n  padding: 8px;\r\n  transition: 0.3s ease-in;\r\n  @include media(\"<=768px\") {\r\n    right: 15px;\r\n  }\r\n}\r\n// State of button when open\r\n.menu-btn.is-open {\r\n  color: $white;\r\n  background: $blue;\r\n}\r\n//Hide button title\r\n@include media(\"<=360px\") {\r\n  .menu-btn span {\r\n    display: none;\r\n  }\r\n}\r\n","// Sidebar navigation\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  min-width: 250px;\r\n  transform: translateX(-105%);\r\n  transition: transform 0.3s ease-in;\r\n  height: 100%;\r\n  overflow: auto;\r\n  z-index: 1000;\r\n  background: $white;\r\n  box-shadow: $shadow2;\r\n  @include media(\"<=300px\") {\r\n    min-width: 200px;\r\n  }\r\n}\r\n// State of sidebar when open\r\n.sidebar.is-open {\r\n  transform: translateX(0);\r\n}\r\n.music-list-header {\r\n  font-size: 1rem;\r\n  margin-top: 6px;\r\n  text-align: center;\r\n  color: $black;\r\n  margin: 20px 0;\r\n}\r\n.music-list {\r\n  list-style: none;\r\n  margin: 5px 0;\r\n}\r\n.music-list-item {\r\n  @include flex();\r\n  padding: 7px;\r\n  color: $black;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease-in;\r\n}\r\n.music-list-item:hover,\r\n.music-list-item.is-active {\r\n  background: $grey;\r\n}\r\n.music-list-image {\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: cover;\r\n}\r\n.music-list-title {\r\n  font-size: 0.6rem;\r\n  font-weight: 400;\r\n  margin-left: 10px;\r\n}\r\n"]}